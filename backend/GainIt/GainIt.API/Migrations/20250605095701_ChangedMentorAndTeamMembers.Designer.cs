// <auto-generated />
using System;
using System.Collections.Generic;
using GainIt.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GainIt.API.Migrations
{
    [DbContext(typeof(GainItDbContext))]
    [Migration("20250605095701_ChangedMentorAndTeamMembers")]
    partial class ChangedMentorAndTeamMembers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GainIt.API.Models.Projects.ProjectMember", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LeftAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectMembers");
                });

            modelBuilder.Entity("GainIt.API.Models.Projects.TemplateProject", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.PrimitiveCollection<List<string>>("Goals")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("text[]");

                    b.Property<string>("ProjectDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ProjectPictureUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.PrimitiveCollection<List<string>>("RequiredRoles")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<List<string>>("Technologies")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("ProjectId");

                    b.ToTable("TemplateProjects");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("GainIt.API.Models.Users.AchievementTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UnlockCriteria")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("AchievementTemplates");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Expertise.UserExpertise", b =>
                {
                    b.Property<Guid>("ExpertiseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ExpertiseId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserExpertises");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("GainIt.API.Models.Users.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FacebookPageURL")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("GitHubURL")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("LinkedInURL")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ProfilePictureURL")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("GainIt.API.Models.Users.UserAchievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AchievementTemplateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EarnedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EarnedDetails")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AchievementTemplateId");

                    b.HasIndex("UserId", "AchievementTemplateId")
                        .IsUnique();

                    b.ToTable("UserAchievements");
                });

            modelBuilder.Entity("GainIt.API.Models.Projects.UserProject", b =>
                {
                    b.HasBaseType("GainIt.API.Models.Projects.TemplateProject");

                    b.Property<Guid?>("AssignedMentorUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("GainerUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OwningOrganizationUserId")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<string>>("ProgrammingLanguages")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("ProjectSource")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectStatus")
                        .HasColumnType("integer");

                    b.Property<string>("RepositoryLink")
                        .HasColumnType("text");

                    b.HasIndex("AssignedMentorUserId");

                    b.HasIndex("GainerUserId");

                    b.HasIndex("OwningOrganizationUserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Expertise.NonprofitExpertise", b =>
                {
                    b.HasBaseType("GainIt.API.Models.Users.Expertise.UserExpertise");

                    b.Property<string>("FieldOfWork")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("MissionStatement")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.ToTable("NonprofitExpertises");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Expertise.TechExpertise", b =>
                {
                    b.HasBaseType("GainIt.API.Models.Users.Expertise.UserExpertise");

                    b.PrimitiveCollection<List<string>>("ProgrammingLanguages")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<List<string>>("Technologies")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<List<string>>("Tools")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.ToTable("TechExpertises");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Gainers.Gainer", b =>
                {
                    b.HasBaseType("GainIt.API.Models.Users.User");

                    b.PrimitiveCollection<List<string>>("AreasOfInterest")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("EducationStatus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("TechExpertiseExpertiseId")
                        .HasColumnType("uuid");

                    b.HasIndex("TechExpertiseExpertiseId");

                    b.ToTable("Gainers");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Mentors.Mentor", b =>
                {
                    b.HasBaseType("GainIt.API.Models.Users.User");

                    b.Property<string>("AreaOfExpertise")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("TechExpertiseExpertiseId")
                        .HasColumnType("uuid");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("integer");

                    b.HasIndex("TechExpertiseExpertiseId");

                    b.ToTable("Mentors");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Nonprofits.NonprofitOrganization", b =>
                {
                    b.HasBaseType("GainIt.API.Models.Users.User");

                    b.Property<Guid>("NonprofitExpertiseExpertiseId")
                        .HasColumnType("uuid");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("NonprofitExpertiseExpertiseId");

                    b.ToTable("Nonprofits");
                });

            modelBuilder.Entity("GainIt.API.Models.Projects.ProjectMember", b =>
                {
                    b.HasOne("GainIt.API.Models.Projects.UserProject", "Project")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GainIt.API.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Expertise.UserExpertise", b =>
                {
                    b.HasOne("GainIt.API.Models.Users.User", "User")
                        .WithOne()
                        .HasForeignKey("GainIt.API.Models.Users.Expertise.UserExpertise", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.UserAchievement", b =>
                {
                    b.HasOne("GainIt.API.Models.Users.AchievementTemplate", "AchievementTemplate")
                        .WithMany()
                        .HasForeignKey("AchievementTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GainIt.API.Models.Users.User", "User")
                        .WithMany("Achievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AchievementTemplate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GainIt.API.Models.Projects.UserProject", b =>
                {
                    b.HasOne("GainIt.API.Models.Users.Mentors.Mentor", "AssignedMentor")
                        .WithMany("MentoredProjects")
                        .HasForeignKey("AssignedMentorUserId");

                    b.HasOne("GainIt.API.Models.Users.Gainers.Gainer", null)
                        .WithMany("ParticipatedProjects")
                        .HasForeignKey("GainerUserId");

                    b.HasOne("GainIt.API.Models.Users.Nonprofits.NonprofitOrganization", "OwningOrganization")
                        .WithMany("OwnedProjects")
                        .HasForeignKey("OwningOrganizationUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AssignedMentor");

                    b.Navigation("OwningOrganization");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Expertise.NonprofitExpertise", b =>
                {
                    b.HasOne("GainIt.API.Models.Users.Expertise.UserExpertise", null)
                        .WithOne()
                        .HasForeignKey("GainIt.API.Models.Users.Expertise.NonprofitExpertise", "ExpertiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Expertise.TechExpertise", b =>
                {
                    b.HasOne("GainIt.API.Models.Users.Expertise.UserExpertise", null)
                        .WithOne()
                        .HasForeignKey("GainIt.API.Models.Users.Expertise.TechExpertise", "ExpertiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Gainers.Gainer", b =>
                {
                    b.HasOne("GainIt.API.Models.Users.Expertise.TechExpertise", "TechExpertise")
                        .WithMany()
                        .HasForeignKey("TechExpertiseExpertiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GainIt.API.Models.Users.User", null)
                        .WithOne()
                        .HasForeignKey("GainIt.API.Models.Users.Gainers.Gainer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TechExpertise");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Mentors.Mentor", b =>
                {
                    b.HasOne("GainIt.API.Models.Users.Expertise.TechExpertise", "TechExpertise")
                        .WithMany()
                        .HasForeignKey("TechExpertiseExpertiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GainIt.API.Models.Users.User", null)
                        .WithOne()
                        .HasForeignKey("GainIt.API.Models.Users.Mentors.Mentor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TechExpertise");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Nonprofits.NonprofitOrganization", b =>
                {
                    b.HasOne("GainIt.API.Models.Users.Expertise.NonprofitExpertise", "NonprofitExpertise")
                        .WithMany()
                        .HasForeignKey("NonprofitExpertiseExpertiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GainIt.API.Models.Users.User", null)
                        .WithOne()
                        .HasForeignKey("GainIt.API.Models.Users.Nonprofits.NonprofitOrganization", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NonprofitExpertise");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.User", b =>
                {
                    b.Navigation("Achievements");
                });

            modelBuilder.Entity("GainIt.API.Models.Projects.UserProject", b =>
                {
                    b.Navigation("ProjectMembers");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Gainers.Gainer", b =>
                {
                    b.Navigation("ParticipatedProjects");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Mentors.Mentor", b =>
                {
                    b.Navigation("MentoredProjects");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Nonprofits.NonprofitOrganization", b =>
                {
                    b.Navigation("OwnedProjects");
                });
#pragma warning restore 612, 618
        }
    }
}

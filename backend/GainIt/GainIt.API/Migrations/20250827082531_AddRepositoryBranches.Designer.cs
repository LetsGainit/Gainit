// <auto-generated />
using System;
using System.Collections.Generic;
using GainIt.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GainIt.API.Migrations
{
    [DbContext(typeof(GainItDbContext))]
    [Migration("20250827082531_AddRepositoryBranches")]
    partial class AddRepositoryBranches
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GainIt.API.Models.Projects.GitHubAnalytics", b =>
                {
                    b.Property<Guid>("AnalyticsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ActiveContributors")
                        .HasColumnType("integer");

                    b.Property<double?>("AverageTimeToCloseIssues")
                        .HasColumnType("double precision");

                    b.Property<double?>("AverageTimeToMergePRs")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CalculatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ClosedIssues")
                        .HasColumnType("integer");

                    b.Property<int>("ClosedPullRequests")
                        .HasColumnType("integer");

                    b.Property<int>("DaysPeriod")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FirstCommitDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LanguageStats")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastCommitDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MergedPullRequests")
                        .HasColumnType("integer");

                    b.Property<string>("MonthlyCommits")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MonthlyIssues")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MonthlyPullRequests")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OpenIssues")
                        .HasColumnType("integer");

                    b.Property<int>("OpenPullRequests")
                        .HasColumnType("integer");

                    b.Property<Guid>("RepositoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("TotalAdditions")
                        .HasColumnType("integer");

                    b.Property<int>("TotalBranches")
                        .HasColumnType("integer");

                    b.Property<int>("TotalCommits")
                        .HasColumnType("integer");

                    b.Property<int>("TotalContributors")
                        .HasColumnType("integer");

                    b.Property<int>("TotalDeletions")
                        .HasColumnType("integer");

                    b.Property<int>("TotalForks")
                        .HasColumnType("integer");

                    b.Property<int>("TotalIssues")
                        .HasColumnType("integer");

                    b.Property<int>("TotalLinesChanged")
                        .HasColumnType("integer");

                    b.Property<int>("TotalPullRequests")
                        .HasColumnType("integer");

                    b.Property<int>("TotalReleases")
                        .HasColumnType("integer");

                    b.Property<int>("TotalStars")
                        .HasColumnType("integer");

                    b.Property<int>("TotalTags")
                        .HasColumnType("integer");

                    b.Property<int>("TotalWatchers")
                        .HasColumnType("integer");

                    b.Property<string>("WeeklyCommits")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WeeklyIssues")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WeeklyPullRequests")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AnalyticsId");

                    b.HasIndex("RepositoryId")
                        .IsUnique();

                    b.ToTable("GitHubAnalytics");
                });

            modelBuilder.Entity("GainIt.API.Models.Projects.GitHubContribution", b =>
                {
                    b.Property<Guid>("ContributionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActivityByMonth")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("AverageCommitSize")
                        .HasColumnType("double precision");

                    b.Property<double?>("AverageReviewTime")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CalculatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ClosedIssuesCreated")
                        .HasColumnType("integer");

                    b.Property<int>("ClosedPullRequestsCreated")
                        .HasColumnType("integer");

                    b.Property<int>("CollaboratorsInteractedWith")
                        .HasColumnType("integer");

                    b.Property<string>("CommitsByDayOfWeek")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CommitsByHour")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CurrentStreak")
                        .HasColumnType("integer");

                    b.Property<int>("DaysPeriod")
                        .HasColumnType("integer");

                    b.Property<int>("DiscussionsParticipated")
                        .HasColumnType("integer");

                    b.Property<int>("FilesModified")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FirstCommitDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GitHubUsername")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("IssuesAssigned")
                        .HasColumnType("integer");

                    b.Property<int>("IssuesClosed")
                        .HasColumnType("integer");

                    b.Property<int>("IssuesCommentedOn")
                        .HasColumnType("integer");

                    b.Property<string>("LanguagesContributed")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastCommitDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LongestStreak")
                        .HasColumnType("integer");

                    b.Property<int>("MergedPullRequestsCreated")
                        .HasColumnType("integer");

                    b.Property<int>("OpenIssuesCreated")
                        .HasColumnType("integer");

                    b.Property<int>("OpenPullRequestsCreated")
                        .HasColumnType("integer");

                    b.Property<int>("PullRequestsApproved")
                        .HasColumnType("integer");

                    b.Property<int>("PullRequestsRequestedChanges")
                        .HasColumnType("integer");

                    b.Property<int>("PullRequestsReviewed")
                        .HasColumnType("integer");

                    b.Property<Guid>("RepositoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("ReviewsApproved")
                        .HasColumnType("integer");

                    b.Property<int>("ReviewsCommented")
                        .HasColumnType("integer");

                    b.Property<int>("ReviewsRequestedChanges")
                        .HasColumnType("integer");

                    b.Property<int>("TotalAdditions")
                        .HasColumnType("integer");

                    b.Property<int>("TotalCommits")
                        .HasColumnType("integer");

                    b.Property<int>("TotalDeletions")
                        .HasColumnType("integer");

                    b.Property<int>("TotalIssuesCreated")
                        .HasColumnType("integer");

                    b.Property<int>("TotalLinesChanged")
                        .HasColumnType("integer");

                    b.Property<int>("TotalPullRequestsCreated")
                        .HasColumnType("integer");

                    b.Property<int>("TotalReviews")
                        .HasColumnType("integer");

                    b.Property<int>("UniqueDaysWithCommits")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("WikiPagesEdited")
                        .HasColumnType("integer");

                    b.HasKey("ContributionId");

                    b.HasIndex("RepositoryId");

                    b.HasIndex("UserId");

                    b.ToTable("GitHubContributions");
                });

            modelBuilder.Entity("GainIt.API.Models.Projects.GitHubRepository", b =>
                {
                    b.Property<Guid>("RepositoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Branches")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DefaultBranch")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("ForksCount")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFork")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Languages")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastActivityAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastSyncedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("License")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("OpenIssuesCount")
                        .HasColumnType("integer");

                    b.Property<int?>("OpenPullRequestsCount")
                        .HasColumnType("integer");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PrimaryLanguage")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("RepositoryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("RepositoryUrl")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int?>("StarsCount")
                        .HasColumnType("integer");

                    b.HasKey("RepositoryId");

                    b.HasIndex("ProjectId");

                    b.ToTable("GitHubRepositories");
                });

            modelBuilder.Entity("GainIt.API.Models.Projects.GitHubSyncLog", b =>
                {
                    b.Property<Guid>("SyncLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<int?>("ItemsProcessed")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RateLimitResetAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("RemainingRequests")
                        .HasColumnType("integer");

                    b.Property<Guid>("RepositoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SyncDetails")
                        .HasColumnType("text");

                    b.Property<string>("SyncType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TotalItems")
                        .HasColumnType("integer");

                    b.HasKey("SyncLogId");

                    b.HasIndex("RepositoryId");

                    b.ToTable("GitHubSyncLogs");
                });

            modelBuilder.Entity("GainIt.API.Models.Projects.JoinRequest", b =>
                {
                    b.Property<Guid>("JoinRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeciderUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DecisionAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DecisionReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("RequestedRole")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("RequesterUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("JoinRequestId");

                    b.HasIndex("RequesterUserId");

                    b.HasIndex("ProjectId", "RequesterUserId")
                        .IsUnique()
                        .HasFilter("\"Status\" = 0");

                    b.HasIndex("ProjectId", "Status");

                    b.ToTable("JoinRequests");
                });

            modelBuilder.Entity("GainIt.API.Models.Projects.ProjectMember", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LeftAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectMembers");
                });

            modelBuilder.Entity("GainIt.API.Models.Projects.TemplateProject", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.PrimitiveCollection<List<string>>("Goals")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("text[]");

                    b.Property<string>("ProjectDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ProjectPictureUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.PrimitiveCollection<List<string>>("RequiredRoles")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<List<string>>("Technologies")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("ProjectId");

                    b.ToTable("TemplateProjects");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("GainIt.API.Models.Tasks.ProjectMilestone", b =>
                {
                    b.Property<Guid>("MilestoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.HasKey("MilestoneId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectMilestones");
                });

            modelBuilder.Entity("GainIt.API.Models.Tasks.ProjectSubtask", b =>
                {
                    b.Property<Guid>("SubtaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("SubtaskId");

                    b.HasIndex("TaskId", "OrderIndex");

                    b.ToTable("ProjectSubtasks");
                });

            modelBuilder.Entity("GainIt.API.Models.Tasks.ProjectTask", b =>
                {
                    b.Property<Guid>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AssignedRole")
                        .HasColumnType("text");

                    b.Property<Guid?>("AssignedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasMaxLength(300)
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<DateTime?>("DueAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MilestoneId")
                        .HasColumnType("uuid");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("TaskId");

                    b.HasIndex("MilestoneId");

                    b.HasIndex("ProjectId", "AssignedRole", "AssignedUserId");

                    b.HasIndex("ProjectId", "Status", "OrderIndex");

                    b.ToTable("ProjectTasks");
                });

            modelBuilder.Entity("GainIt.API.Models.Tasks.ProjectTaskReference", b =>
                {
                    b.Property<Guid>("ReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.HasKey("ReferenceId");

                    b.HasIndex("TaskId", "Type");

                    b.ToTable("ProjectTaskReferences");
                });

            modelBuilder.Entity("GainIt.API.Models.Tasks.TaskDependency", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DependsOnTaskId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskId", "DependsOnTaskId");

                    b.HasIndex("DependsOnTaskId");

                    b.ToTable("TaskDependencies");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.AchievementTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UnlockCriteria")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("AchievementTemplates");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Expertise.UserExpertise", b =>
                {
                    b.Property<Guid>("ExpertiseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ExpertiseId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserExpertises");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("GainIt.API.Models.Users.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Biography")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FacebookPageURL")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("GitHubURL")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("GitHubUsername")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LinkedInURL")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ProfilePictureURL")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("UserRole")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("GainIt.API.Models.Users.UserAchievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AchievementTemplateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EarnedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EarnedDetails")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AchievementTemplateId");

                    b.HasIndex("UserId", "AchievementTemplateId")
                        .IsUnique();

                    b.ToTable("UserAchievements");
                });

            modelBuilder.Entity("GainIt.API.Models.Projects.UserProject", b =>
                {
                    b.HasBaseType("GainIt.API.Models.Projects.TemplateProject");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("GainerUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MentorUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OwningOrganizationUserId")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<string>>("ProgrammingLanguages")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("ProjectSource")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectStatus")
                        .HasColumnType("integer");

                    b.Property<string>("RepositoryLink")
                        .HasColumnType("text");

                    b.HasIndex("GainerUserId");

                    b.HasIndex("MentorUserId");

                    b.HasIndex("OwningOrganizationUserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Expertise.NonprofitExpertise", b =>
                {
                    b.HasBaseType("GainIt.API.Models.Users.Expertise.UserExpertise");

                    b.Property<string>("FieldOfWork")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("MissionStatement")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.ToTable("NonprofitExpertises");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Expertise.TechExpertise", b =>
                {
                    b.HasBaseType("GainIt.API.Models.Users.Expertise.UserExpertise");

                    b.PrimitiveCollection<List<string>>("ProgrammingLanguages")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<List<string>>("Technologies")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<List<string>>("Tools")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.ToTable("TechExpertises");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Gainers.Gainer", b =>
                {
                    b.HasBaseType("GainIt.API.Models.Users.User");

                    b.PrimitiveCollection<List<string>>("AreasOfInterest")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("EducationStatus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("TechExpertiseExpertiseId")
                        .HasColumnType("uuid");

                    b.HasIndex("TechExpertiseExpertiseId");

                    b.ToTable("Gainers");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Mentors.Mentor", b =>
                {
                    b.HasBaseType("GainIt.API.Models.Users.User");

                    b.Property<string>("AreaOfExpertise")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("TechExpertiseExpertiseId")
                        .HasColumnType("uuid");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("integer");

                    b.HasIndex("TechExpertiseExpertiseId");

                    b.ToTable("Mentors");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Nonprofits.NonprofitOrganization", b =>
                {
                    b.HasBaseType("GainIt.API.Models.Users.User");

                    b.Property<Guid>("NonprofitExpertiseExpertiseId")
                        .HasColumnType("uuid");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("NonprofitExpertiseExpertiseId");

                    b.ToTable("Nonprofits");
                });

            modelBuilder.Entity("GainIt.API.Models.Projects.GitHubAnalytics", b =>
                {
                    b.HasOne("GainIt.API.Models.Projects.GitHubRepository", "Repository")
                        .WithOne("Analytics")
                        .HasForeignKey("GainIt.API.Models.Projects.GitHubAnalytics", "RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("GainIt.API.Models.Projects.GitHubContribution", b =>
                {
                    b.HasOne("GainIt.API.Models.Projects.GitHubRepository", "Repository")
                        .WithMany("Contributions")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GainIt.API.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Repository");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GainIt.API.Models.Projects.GitHubRepository", b =>
                {
                    b.HasOne("GainIt.API.Models.Projects.UserProject", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("GainIt.API.Models.Projects.GitHubSyncLog", b =>
                {
                    b.HasOne("GainIt.API.Models.Projects.GitHubRepository", "Repository")
                        .WithMany("SyncLogs")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("GainIt.API.Models.Projects.JoinRequest", b =>
                {
                    b.HasOne("GainIt.API.Models.Projects.UserProject", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GainIt.API.Models.Users.User", "RequesterUser")
                        .WithMany()
                        .HasForeignKey("RequesterUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("RequesterUser");
                });

            modelBuilder.Entity("GainIt.API.Models.Projects.ProjectMember", b =>
                {
                    b.HasOne("GainIt.API.Models.Projects.UserProject", "Project")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GainIt.API.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GainIt.API.Models.Tasks.ProjectMilestone", b =>
                {
                    b.HasOne("GainIt.API.Models.Projects.UserProject", "Project")
                        .WithMany("Milestones")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("GainIt.API.Models.Tasks.ProjectSubtask", b =>
                {
                    b.HasOne("GainIt.API.Models.Tasks.ProjectTask", "Task")
                        .WithMany("Subtasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("GainIt.API.Models.Tasks.ProjectTask", b =>
                {
                    b.HasOne("GainIt.API.Models.Tasks.ProjectMilestone", "Milestone")
                        .WithMany("Tasks")
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GainIt.API.Models.Projects.UserProject", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Milestone");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("GainIt.API.Models.Tasks.ProjectTaskReference", b =>
                {
                    b.HasOne("GainIt.API.Models.Tasks.ProjectTask", "Task")
                        .WithMany("References")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("GainIt.API.Models.Tasks.TaskDependency", b =>
                {
                    b.HasOne("GainIt.API.Models.Tasks.ProjectTask", "DependsOn")
                        .WithMany()
                        .HasForeignKey("DependsOnTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GainIt.API.Models.Tasks.ProjectTask", "Task")
                        .WithMany("Dependencies")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DependsOn");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Expertise.UserExpertise", b =>
                {
                    b.HasOne("GainIt.API.Models.Users.User", "User")
                        .WithOne()
                        .HasForeignKey("GainIt.API.Models.Users.Expertise.UserExpertise", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.UserAchievement", b =>
                {
                    b.HasOne("GainIt.API.Models.Users.AchievementTemplate", "AchievementTemplate")
                        .WithMany()
                        .HasForeignKey("AchievementTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GainIt.API.Models.Users.User", "User")
                        .WithMany("Achievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AchievementTemplate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GainIt.API.Models.Projects.UserProject", b =>
                {
                    b.HasOne("GainIt.API.Models.Users.Gainers.Gainer", null)
                        .WithMany("ParticipatedProjects")
                        .HasForeignKey("GainerUserId");

                    b.HasOne("GainIt.API.Models.Users.Mentors.Mentor", null)
                        .WithMany("MentoredProjects")
                        .HasForeignKey("MentorUserId");

                    b.HasOne("GainIt.API.Models.Users.Nonprofits.NonprofitOrganization", "OwningOrganization")
                        .WithMany("OwnedProjects")
                        .HasForeignKey("OwningOrganizationUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("OwningOrganization");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Expertise.NonprofitExpertise", b =>
                {
                    b.HasOne("GainIt.API.Models.Users.Expertise.UserExpertise", null)
                        .WithOne()
                        .HasForeignKey("GainIt.API.Models.Users.Expertise.NonprofitExpertise", "ExpertiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Expertise.TechExpertise", b =>
                {
                    b.HasOne("GainIt.API.Models.Users.Expertise.UserExpertise", null)
                        .WithOne()
                        .HasForeignKey("GainIt.API.Models.Users.Expertise.TechExpertise", "ExpertiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Gainers.Gainer", b =>
                {
                    b.HasOne("GainIt.API.Models.Users.Expertise.TechExpertise", "TechExpertise")
                        .WithMany()
                        .HasForeignKey("TechExpertiseExpertiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GainIt.API.Models.Users.User", null)
                        .WithOne()
                        .HasForeignKey("GainIt.API.Models.Users.Gainers.Gainer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TechExpertise");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Mentors.Mentor", b =>
                {
                    b.HasOne("GainIt.API.Models.Users.Expertise.TechExpertise", "TechExpertise")
                        .WithMany()
                        .HasForeignKey("TechExpertiseExpertiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GainIt.API.Models.Users.User", null)
                        .WithOne()
                        .HasForeignKey("GainIt.API.Models.Users.Mentors.Mentor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TechExpertise");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Nonprofits.NonprofitOrganization", b =>
                {
                    b.HasOne("GainIt.API.Models.Users.Expertise.NonprofitExpertise", "NonprofitExpertise")
                        .WithMany()
                        .HasForeignKey("NonprofitExpertiseExpertiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GainIt.API.Models.Users.User", null)
                        .WithOne()
                        .HasForeignKey("GainIt.API.Models.Users.Nonprofits.NonprofitOrganization", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NonprofitExpertise");
                });

            modelBuilder.Entity("GainIt.API.Models.Projects.GitHubRepository", b =>
                {
                    b.Navigation("Analytics");

                    b.Navigation("Contributions");

                    b.Navigation("SyncLogs");
                });

            modelBuilder.Entity("GainIt.API.Models.Tasks.ProjectMilestone", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("GainIt.API.Models.Tasks.ProjectTask", b =>
                {
                    b.Navigation("Dependencies");

                    b.Navigation("References");

                    b.Navigation("Subtasks");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.User", b =>
                {
                    b.Navigation("Achievements");
                });

            modelBuilder.Entity("GainIt.API.Models.Projects.UserProject", b =>
                {
                    b.Navigation("Milestones");

                    b.Navigation("ProjectMembers");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Gainers.Gainer", b =>
                {
                    b.Navigation("ParticipatedProjects");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Mentors.Mentor", b =>
                {
                    b.Navigation("MentoredProjects");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Nonprofits.NonprofitOrganization", b =>
                {
                    b.Navigation("OwnedProjects");
                });
#pragma warning restore 612, 618
        }
    }
}

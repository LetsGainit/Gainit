// <auto-generated />
using System;
using System.Collections.Generic;
using GainIt.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GainIt.API.Migrations
{
    [DbContext(typeof(GainItDbContext))]
    [Migration("20250426082316_ChangedDifficultyLevelToNullable")]
    partial class ChangedDifficultyLevelToNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GainIt.API.Models.Projects.Project", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssignedMentorUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DifficultyLevel")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OwningOrganizationUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProjectDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ProjectSource")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectStatus")
                        .HasColumnType("integer");

                    b.Property<string>("RepositoryLink")
                        .HasColumnType("text");

                    b.HasKey("ProjectId");

                    b.HasIndex("AssignedMentorUserId");

                    b.HasIndex("OwningOrganizationUserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("GainIt.API.Models.Projects.TemplateProject", b =>
                {
                    b.Property<Guid>("TemplateProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("TemplateProjectId");

                    b.ToTable("TemplateProjects");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("GainerProject", b =>
                {
                    b.Property<Guid>("ParticipatedProjectsProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamMembersUserId")
                        .HasColumnType("uuid");

                    b.HasKey("ParticipatedProjectsProjectId", "TeamMembersUserId");

                    b.HasIndex("TeamMembersUserId");

                    b.ToTable("ProjectTeamMembers", (string)null);
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Gainers.Gainer", b =>
                {
                    b.HasBaseType("GainIt.API.Models.Users.User");

                    b.PrimitiveCollection<List<string>>("AreasOfInterest")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("EducationStatus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.ToTable("Gainers");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Mentors.Mentor", b =>
                {
                    b.HasBaseType("GainIt.API.Models.Users.User");

                    b.Property<string>("AreaOfExpertise")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("integer");

                    b.ToTable("Mentors");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Nonprofits.NonprofitOrganization", b =>
                {
                    b.HasBaseType("GainIt.API.Models.Users.User");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Nonprofits");
                });

            modelBuilder.Entity("GainIt.API.Models.Projects.Project", b =>
                {
                    b.HasOne("GainIt.API.Models.Users.Mentors.Mentor", "AssignedMentor")
                        .WithMany("MentoredProjects")
                        .HasForeignKey("AssignedMentorUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GainIt.API.Models.Users.Nonprofits.NonprofitOrganization", "OwningOrganization")
                        .WithMany("OwnedProjects")
                        .HasForeignKey("OwningOrganizationUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AssignedMentor");

                    b.Navigation("OwningOrganization");
                });

            modelBuilder.Entity("GainerProject", b =>
                {
                    b.HasOne("GainIt.API.Models.Projects.Project", null)
                        .WithMany()
                        .HasForeignKey("ParticipatedProjectsProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GainIt.API.Models.Users.Gainers.Gainer", null)
                        .WithMany()
                        .HasForeignKey("TeamMembersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Gainers.Gainer", b =>
                {
                    b.HasOne("GainIt.API.Models.Users.User", null)
                        .WithOne()
                        .HasForeignKey("GainIt.API.Models.Users.Gainers.Gainer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Mentors.Mentor", b =>
                {
                    b.HasOne("GainIt.API.Models.Users.User", null)
                        .WithOne()
                        .HasForeignKey("GainIt.API.Models.Users.Mentors.Mentor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Nonprofits.NonprofitOrganization", b =>
                {
                    b.HasOne("GainIt.API.Models.Users.User", null)
                        .WithOne()
                        .HasForeignKey("GainIt.API.Models.Users.Nonprofits.NonprofitOrganization", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Mentors.Mentor", b =>
                {
                    b.Navigation("MentoredProjects");
                });

            modelBuilder.Entity("GainIt.API.Models.Users.Nonprofits.NonprofitOrganization", b =>
                {
                    b.Navigation("OwnedProjects");
                });
#pragma warning restore 612, 618
        }
    }
}

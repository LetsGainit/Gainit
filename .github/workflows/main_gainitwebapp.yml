# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy ASP.Net Core app to Azure Web App - GainItWebApp

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Build with dotnet
        run: dotnet build backend/GainIt/GainIt.API/GainIt.API.csproj --configuration Release


      - name: dotnet publish
        run: dotnet publish backend/GainIt/GainIt.API/GainIt.API.csproj -c Release -o "${{env.DOTNET_ROOT}}/myapp"

      - name: Install ilspycmd (decompiler)
        shell: pwsh
        run: |
          dotnet tool install -g ilspycmd
          echo "C:\\Users\\runneradmin\\.dotnet\\tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Verify built DLL contains new auth marker
        shell: pwsh
        run: |
          $dll = "${{env.DOTNET_ROOT}}/myapp/GainIt.API.dll"
          Write-Host "Decompiling and checking for marker in: $dll"
          $out = Join-Path $env:RUNNER_TEMP "ilspy-out"
          if (Test-Path $out) { Remove-Item -Recurse -Force $out }
          ilspycmd --project "$dll" --outputdir "$out"
          $found = Get-ChildItem -Recurse -Path $out -Include *.cs | Select-String -Pattern "AUTH CONFIG VERSION v9.2" -Quiet
          if (-not $found) { Write-Error "AUTH CONFIG VERSION v9.2 marker NOT found in decompiled sources"; exit 1 }
          Write-Host "Marker found. Proceeding."

      - name: Export OpenAPI (Swagger) JSON
        shell: pwsh
        run: |
          $out = Join-Path $env:RUNNER_TEMP "openapi.json"
          $port = 5010
          $url = "http://localhost:$port/swagger/v1/swagger.json"

          # Run the published app to serve Swagger (force Development to enable Swagger UI)
          $env:ASPNETCORE_ENVIRONMENT = "Development"
          $env:ASPNETCORE_URLS = "http://localhost:$port"
          $appPath = "${{env.DOTNET_ROOT}}/myapp/GainIt.API.dll"
          Write-Host "Starting API to export Swagger from: $appPath on $($env:ASPNETCORE_URLS)"
          $proc = Start-Process -FilePath "dotnet" -ArgumentList "`"$appPath`"" -PassThru

          # Wait for the app to be ready and fetch swagger.json
          $maxAttempts = 30
          for ($i = 0; $i -lt $maxAttempts; $i++) {
            try {
              Invoke-WebRequest -Uri $url -OutFile $out -UseBasicParsing -TimeoutSec 5
              break
            } catch {
              Start-Sleep -Seconds 2
            }
          }

          if (-not (Test-Path $out)) {
            Write-Error "Failed to generate OpenAPI JSON by requesting $url"; 
            if ($proc -and !$proc.HasExited) { Stop-Process -Id $proc.Id -Force }
            exit 1
          }

          Write-Host "Swagger JSON saved to: $out"
          if ($proc -and !$proc.HasExited) { Stop-Process -Id $proc.Id -Force }

      - name: Generate TypeScript types from OpenAPI
        shell: pwsh
        run: |
          npm i -g openapi-typescript
          $spec = Join-Path $env:RUNNER_TEMP "openapi.json"
          $types = Join-Path $env:RUNNER_TEMP "api-types.ts"
          openapi-typescript "$spec" -o "$types"
          if (-not (Test-Path $types)) { Write-Error "TypeScript types generation failed"; exit 1 }

      - name: Upload OpenAPI and client artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-contract
          path: |
            ${{ runner.temp }}/openapi.json
            ${{ runner.temp }}/api-types.ts

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp

  deploy:
    runs-on: windows-latest
    needs: build
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app
          path: ./artifact
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_51F2AFA3F65240F99DB839FFBC48CD03 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_92BD9DB22FC94ED48B7EEDD63CEC6104 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_80FCFF36DC004C80A212158594C35A58 }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'GainItWebApp'
          slot-name: 'Production'
          package: ./artifact
          clean: true
          

# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy ASP.Net Core app to Azure Web App - GainItWebApp

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Build with dotnet
        run: dotnet build backend/GainIt/GainIt.API/GainIt.API.csproj --configuration Release 


      - name: dotnet publish
        run: dotnet publish backend/GainIt/GainIt.API/GainIt.API.csproj -c Release -o "${{env.DOTNET_ROOT}}/myapp"

      - name: Install ilspycmd (decompiler)
        shell: pwsh
        run: |
          dotnet tool install -g ilspycmd
          echo "C:\\Users\\runneradmin\\.dotnet\\tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Verify built DLL contains new auth marker
        shell: pwsh
        run: |
          $dll = "${{env.DOTNET_ROOT}}/myapp/GainIt.API.dll"
          Write-Host "Decompiling and checking for marker in: $dll"
          $out = Join-Path $env:RUNNER_TEMP "ilspy-out"
          if (Test-Path $out) { Remove-Item -Recurse -Force $out }
          ilspycmd --project "$dll" --outputdir "$out"
          $found = Get-ChildItem -Recurse -Path $out -Include *.cs | Select-String -Pattern "AUTH CONFIG VERSION v4" -Quiet
          if (-not $found) { Write-Error "AUTH CONFIG VERSION v4 marker NOT found in decompiled sources"; exit 1 }
          Write-Host "Marker found. Proceeding."

      # Removed Swagger export and TypeScript generation per requests

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp

  deploy:
    runs-on: windows-latest
    needs: build
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app
          path: ./artifact
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_51F2AFA3F65240F99DB839FFBC48CD03 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_92BD9DB22FC94ED48B7EEDD63CEC6104 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_80FCFF36DC004C80A212158594C35A58 }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'GainItWebApp'
          slot-name: 'Production'
          package: ./artifact
          clean: true

      - name: Health Check - Verify deployment and database connectivity
        shell: pwsh
        run: |
          $appUrl = "https://gainitwebapp-dvhfcxbkezgyfwf6.israelcentral-01.azurewebsites.net"
          $healthEndpoint = "$appUrl/health"
          $maxAttempts = 10
          $success = $false
          
          Write-Host "Checking health endpoint: $healthEndpoint"
          
          for ($i = 0; $i -lt $maxAttempts; $i++) {
            try {
              Write-Host "Health check attempt $($i+1)/$maxAttempts"
              $response = Invoke-WebRequest -Uri $healthEndpoint -UseBasicParsing -TimeoutSec 10
              
              if ($response.StatusCode -eq 200) {
                $healthData = $response.Content | ConvertFrom-Json
                Write-Host "Health check response: $($response.Content)"
                
                if ($healthData.status -eq "Healthy") {
                  Write-Host "‚úÖ Health check passed - App is healthy and database is connected"
                  $success = $true
                  break
                } else {
                  Write-Host "‚ö†Ô∏è Health check returned status: $($healthData.status)"
                }
              } else {
                Write-Host "‚ùå Health check returned status code: $($response.StatusCode)"
              }
            } catch {
              Write-Host "‚ùå Health check attempt $($i+1) failed: $($_.Exception.Message)"
            }
            
            if ($i -lt $maxAttempts - 1) {
              Write-Host "Waiting 15 seconds before next attempt..."
              Start-Sleep -Seconds 15
            }
          }
          
          if (-not $success) {
            Write-Error "‚ùå Health check failed after $maxAttempts attempts. App may not be running correctly or database connection failed."
            exit 1
          }
          
          Write-Host "üéâ Deployment verification completed successfully!"


